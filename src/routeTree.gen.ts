/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ProductsIndexImport } from './routes/products.index'
import { Route as CategoriesIndexImport } from './routes/categories.index'
import { Route as SearchTitleImport } from './routes/search.$title'
import { Route as ProductsProductidImport } from './routes/products.$productid'

// Create Virtual Routes

const AboutLazyImport = createFileRoute('/about')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const AboutLazyRoute = AboutLazyImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const ProductsIndexRoute = ProductsIndexImport.update({
  id: '/products/',
  path: '/products/',
  getParentRoute: () => rootRoute,
} as any)

const CategoriesIndexRoute = CategoriesIndexImport.update({
  id: '/categories/',
  path: '/categories/',
  getParentRoute: () => rootRoute,
} as any)

const SearchTitleRoute = SearchTitleImport.update({
  id: '/search/$title',
  path: '/search/$title',
  getParentRoute: () => rootRoute,
} as any)

const ProductsProductidRoute = ProductsProductidImport.update({
  id: '/products/$productid',
  path: '/products/$productid',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutLazyImport
      parentRoute: typeof rootRoute
    }
    '/products/$productid': {
      id: '/products/$productid'
      path: '/products/$productid'
      fullPath: '/products/$productid'
      preLoaderRoute: typeof ProductsProductidImport
      parentRoute: typeof rootRoute
    }
    '/search/$title': {
      id: '/search/$title'
      path: '/search/$title'
      fullPath: '/search/$title'
      preLoaderRoute: typeof SearchTitleImport
      parentRoute: typeof rootRoute
    }
    '/categories/': {
      id: '/categories/'
      path: '/categories'
      fullPath: '/categories'
      preLoaderRoute: typeof CategoriesIndexImport
      parentRoute: typeof rootRoute
    }
    '/products/': {
      id: '/products/'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof ProductsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/about': typeof AboutLazyRoute
  '/products/$productid': typeof ProductsProductidRoute
  '/search/$title': typeof SearchTitleRoute
  '/categories': typeof CategoriesIndexRoute
  '/products': typeof ProductsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/about': typeof AboutLazyRoute
  '/products/$productid': typeof ProductsProductidRoute
  '/search/$title': typeof SearchTitleRoute
  '/categories': typeof CategoriesIndexRoute
  '/products': typeof ProductsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/about': typeof AboutLazyRoute
  '/products/$productid': typeof ProductsProductidRoute
  '/search/$title': typeof SearchTitleRoute
  '/categories/': typeof CategoriesIndexRoute
  '/products/': typeof ProductsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/products/$productid'
    | '/search/$title'
    | '/categories'
    | '/products'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/products/$productid'
    | '/search/$title'
    | '/categories'
    | '/products'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/products/$productid'
    | '/search/$title'
    | '/categories/'
    | '/products/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  AboutLazyRoute: typeof AboutLazyRoute
  ProductsProductidRoute: typeof ProductsProductidRoute
  SearchTitleRoute: typeof SearchTitleRoute
  CategoriesIndexRoute: typeof CategoriesIndexRoute
  ProductsIndexRoute: typeof ProductsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  AboutLazyRoute: AboutLazyRoute,
  ProductsProductidRoute: ProductsProductidRoute,
  SearchTitleRoute: SearchTitleRoute,
  CategoriesIndexRoute: CategoriesIndexRoute,
  ProductsIndexRoute: ProductsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/products/$productid",
        "/search/$title",
        "/categories/",
        "/products/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/about": {
      "filePath": "about.lazy.tsx"
    },
    "/products/$productid": {
      "filePath": "products.$productid.tsx"
    },
    "/search/$title": {
      "filePath": "search.$title.tsx"
    },
    "/categories/": {
      "filePath": "categories.index.tsx"
    },
    "/products/": {
      "filePath": "products.index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
